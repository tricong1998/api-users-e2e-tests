import { Helpers } from './helpers';

describe('helpers', () => {
  // Generated by CodiumAI

  describe('db2api', () => {
    // Should convert a single database object to an API object
    it('should convert a single database object to an API object', () => {
      // Arrange
      const dbObj = { _id: '1', name: 'John Doe', age: 25 };
      const expectedApiObj = { id: '1', name: 'John Doe', age: 25 };

      // Act
      const result = Helpers.db2api(dbObj);

      // Assert
      expect(result).toEqual(expectedApiObj);
    });

    // Should convert an array of database objects to an array of API objects
    it('should convert an array of database objects to an array of API objects', () => {
      // Arrange
      const dbObjs = [
        { _id: '1', name: 'John Doe', age: 25 },
        { _id: '2', name: 'Jane Smith', age: 30 },
      ];
      const expectedApiObjs = [
        { id: '1', name: 'John Doe', age: 25 },
        { id: '2', name: 'Jane Smith', age: 30 },
      ];

      // Act
      const result = Helpers.db2api(dbObjs);

      // Assert
      expect(result).toEqual(expectedApiObjs);
    });

    // Should exclude fields specified in the 'exclude' parameter from the API object
    it("should exclude fields specified in the 'exclude' parameter from the API object", () => {
      // Arrange
      const dbObj = { _id: '1', name: 'John Doe', age: 25, email: 'john@example.com' };
      const exclude = ['email'];
      const expectedApiObj = { id: '1', name: 'John Doe', age: 25 };

      // Act
      const result = Helpers.db2api(dbObj, exclude);

      // Assert
      expect(result).toEqual(expectedApiObj);
    });

    // Should return an empty array when given an empty array
    it('should return an empty array when given an empty array', () => {
      // Arrange
      const dbObjs: string[] = [];
      const expectedApiObjs: string[] = [];

      // Act
      const result = Helpers.db2api(dbObjs);

      // Assert
      expect(result).toEqual(expectedApiObjs);
    });

    // Should return null when given null
    it('should return null when given null', () => {
      // Arrange
      const dbObj = null;

      // Act
      const result = Helpers.db2api(dbObj);

      // Assert
      expect(result).toBeNull();
    });

    // Should return undefined when given undefined
    it('should return undefined when given undefined', () => {
      // Arrange
      const dbObj = undefined;

      // Act
      const result = Helpers.db2api(dbObj);

      // Assert
      expect(result).toBeUndefined();
    });
  });
});
