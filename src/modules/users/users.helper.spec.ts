import { UserHelpers } from './users.helper';
import { Gender, Nation, Role } from './users.type';

describe('UserHelper', () => {
  // Generated by CodiumAI

  describe('calculatePoints', () => {
    // The method correctly calculates points for a user with all default values.
    it('should correctly calculate points for a user with all default values', () => {
      const user = {
        gender: Gender.ANOTHER,
        nation: Nation.ANOTHER,
        role: Role.MEMBER,
      };
      const point = 0;
      const expected = 0;

      const result = UserHelpers.calculatePoints(point, user);

      expect(result).toEqual(expected);
    });

    // The method correctly calculates points for a user with a female gender, Vietnamese nationality, and manager role.
    it('should correctly calculate points for a user with a female gender, Vietnamese nationality, and manager role', () => {
      const user = {
        gender: Gender.FEMALE,
        nation: Nation.VIET_NAM,
        role: Role.MANAGER,
      };
      const point = 0;
      const expected = 3;

      const result = UserHelpers.calculatePoints(point, user);

      expect(result).toEqual(expected);
    });

    // The method correctly calculates points for a user with a male gender, non-Vietnamese nationality, and member role.
    it('should correctly calculate points for a user with a male gender, non-Vietnamese nationality, and member role', () => {
      const user = {
        gender: Gender.MALE,
        nation: Nation.ANOTHER,
        role: Role.MEMBER,
      };
      const point = 0;
      const expected = 0;

      const result = UserHelpers.calculatePoints(point, user);

      expect(result).toEqual(expected);
    });

    // The method correctly calculates points for a user with the minimum possible point value.
    it('should correctly calculate points for a user with the minimum possible point value', () => {
      const user = {
        gender: Gender.ANOTHER,
        nation: Nation.ANOTHER,
        role: Role.MEMBER,
      };
      const point = Number.MIN_SAFE_INTEGER;
      const expected = Number.MIN_SAFE_INTEGER;

      const result = UserHelpers.calculatePoints(point, user);

      expect(result).toEqual(expected);
    });

    // The method correctly calculates points for a user with the maximum possible point value.
    it('should correctly calculate points for a user with the maximum possible point value', () => {
      const user = {
        gender: Gender.ANOTHER,
        nation: Nation.ANOTHER,
        role: Role.MEMBER,
      };
      const point = Number.MAX_SAFE_INTEGER;
      const expected = Number.MAX_SAFE_INTEGER;

      const result = UserHelpers.calculatePoints(point, user);

      expect(result).toEqual(expected);
    });

    // The method correctly calculates points for a user with a non-binary gender, Vietnamese nationality, and no role.
    it('should correctly calculate points for a user with a non-binary gender, Vietnamese nationality, and no role', () => {
      const user = {
        gender: Gender.ANOTHER,
        nation: Nation.VIET_NAM,
        role: Role.MEMBER,
      };
      const point = 0;
      const expected = 1;

      const result = UserHelpers.calculatePoints(point, user);

      expect(result).toEqual(expected);
    });
  });
});
